version: v2beta1
name: goblet-app

require: 
  devspace: '>= 6.0'

pipelines:
  # Overwrite the default pipelines with custom actions
  dev: |-
    services=$(node -r esbuild-register scripts/ds/resolvePipeline.ts BE SC)
    ensure_pull_secrets --all
    if ! is_empty $services; then
      run_pipelines $services
    fi

  deploy: |-
    ensure_pull_secrets --all
    run_pipelines deploy-be

  deployments: |-
    run_pipelines deploy-be

  build: null

  deploy-be: |-
    create_deployments goblet-backend

  start-be: |-
    create_deployments goblet-backend
    start_dev goblet-backend

  start-sc: |-
    create_deployments goblet-screencast
    start_dev goblet-screencast


# Currently we have to define some variables in the yaml that we want to use outside the valuesFiles key in the deployment section
# https://github.com/loft-sh/devspace/issues/1716

# All vars are loaded from the getYamlValue.js script
# This allows them to be loaded from the current ENV, the values.yml files, or a fallback
# See the scripts/ds/getYamlValue.js script for more information
vars:

# ----- General Values ----- #
  GB_TOKEN:
    command: "node scripts/ds/getYamlValue.js GB_TOKEN"
  NPM_TOKEN:
    command: "node scripts/ds/getYamlValue.js NPM_TOKEN"
  NODE_ENV:
    command: "node scripts/ds/getYamlValue.js NODE_ENV"

# ----- Docker Image Values ----- #
  IMAGE:
    command: "node scripts/ds/getYamlValue.js IMAGE"
  IMAGE_TAG:
    command: "node scripts/ds/getYamlValue.js IMAGE_TAG"

# ----- Screencast API Values ----- #
  GB_SC_DEPLOYMENT:
    command: "node scripts/ds/getYamlValue.js GB_SC_DEPLOYMENT"
  GB_SC_IMG_URI:
    command: "node scripts/ds/resolveImgUri.js SC"
  GB_SC_PORT:
    command: "node scripts/ds/getYamlValue.js GB_SC_PORT"
  GB_NO_VNC_PORT:
    command: "node scripts/ds/getYamlValue.js GB_NO_VNC_PORT"
  GB_SC_INGRESS_HOST:
    command: "node scripts/ds/resolveHost.js SC"
  GB_SC_INGRESS_HOST_WILD_CARD:
    command: "node scripts/ds/resolveHost.js SC \"*\""

# ----- Backend API Values ----- #
  GB_BE_DEPLOYMENT:
    command: "node scripts/ds/getYamlValue.js GB_BE_DEPLOYMENT"
  GB_BE_IMG_URI:
    command: "node scripts/ds/resolveImgUri.js BE"
  GB_BE_PORT:
    command: "node scripts/ds/getYamlValue.js GB_BE_PORT"
  GB_BE_WS_PATH:
    command: "node scripts/ds/getYamlValue.js GB_BE_WS_PATH"
  GB_NO_VNC_PATH:
    command: "node scripts/ds/getYamlValue.js GB_NO_VNC_PATH"

# ----- KinD Values ----- #
  GB_KD_SERVICE_ACCOUNT:
    command: "node scripts/ds/getYamlValue.js GB_KD_SERVICE_ACCOUNT"
  GB_KD_ROLE_NAME:
    command: "node scripts/ds/getYamlValue.js GB_KD_ROLE_NAME"
  GB_KD_ROLE_BINDING_NAME:
    command: "node scripts/ds/getYamlValue.js GB_KD_ROLE_BINDING_NAME"
  GB_KD_PORT:
    command: "node scripts/ds/getYamlValue.js GB_KD_PORT"

# Load any pull secrets from the environment by calling the resolvePullSecrets.js script
# The script returns a formatted response as a string
# See the scripts/ds/resolvePullSecrets.js script for more information
pullSecrets: 
  devspace-auth-ghcr-io: $(node scripts/ds/resolvePullSecrets.js)

# Defines if and how the docker image will be built before running it as a container
images:
  goblet-app:
    image: ${IMAGE}
    createPullSecret: true
    injectRestartHelper: false
    tags:
    - ${IMAGE_TAG}
    - '####-${NODE_ENV}-${devspace.git.commit}'
    dockerfile: ./Dockerfile
    context: ../

# The `deployments` section tells devspace how to deploy this project into the cluster
deployments:
  # ----- Screencast API Deployment ----- #
  goblet-screencast:
    helm:
      upgradeArgs:
        - "--force"
      chart:
        name: ./
      valuesFiles:
      - ./values.yml
      - ./values.${NODE_ENV}.yml
      values:
        containers:
        - image: ${GB_SC_IMG_URI}
          imagePullPolicy: $(node scripts/ds/resolvePullPolicy.js SC)
          env: $(node scripts/ds/resolveDSEnvs.js screencast)
        service: $(node scripts/ds/resolveService.js SC $GB_SC_PORT $GB_NO_VNC_PORT)
        ingress:
          name: ${GB_SC_DEPLOYMENT}-ingress
          rules:
          - host: ${GB_SC_INGRESS_HOST}
            serviceName: ${GB_SC_DEPLOYMENT}
            servicePort: ${GB_SC_PORT}
          - host: ${GB_SC_INGRESS_HOST_WILD_CARD}
            serviceName: ${GB_SC_DEPLOYMENT}
            servicePort: ${GB_SC_PORT}
          - host: ${GB_SC_INGRESS_HOST}
            serviceName: ${GB_SC_DEPLOYMENT}
            servicePort: ${GB_NO_VNC_PORT}
          - host: ${GB_SC_INGRESS_HOST_WILD_CARD}
            serviceName: ${GB_SC_DEPLOYMENT}
            servicePort: ${GB_NO_VNC_PORT}

  # ----- Backend API Deployment ----- #
  goblet-backend:
    helm:
      upgradeArgs:
        - "--force"
      chart:
        name: ./
      valuesFiles:
      - ./values.empty.yaml
      values:
        serviceAccountName: ${GB_KD_SERVICE_ACCOUNT}
        customServiceAccount:
          name: ${GB_KD_SERVICE_ACCOUNT}
          imagePullSecret: devspace-auth-ghcr-io
          binding:
            name: ${GB_KD_ROLE_BINDING_NAME}
          role:
            name: ${GB_KD_ROLE_NAME}
            resources:
            - pods
            - pods/exec
            verbs:
            - create
            - delete
            - get
            - list
            - watch
        containers:
        - image: ${GB_BE_IMG_URI}
          imagePullPolicy: $(node scripts/ds/resolvePullPolicy.js BE)
          env: $(node scripts/ds/resolveDSEnvs.js backend docker-auth:user docker-auth:password)
        service: $(node scripts/ds/resolveService.js BE $GB_BE_PORT)
        ingress: $(node scripts/ds/resolveIngress.js BE $GB_BE_PORT "*" "$GB_BE_WS_PATH" "$GB_NO_VNC_PATH")

# Gets the apps that should sync with the host machine
dev: $(node scripts/ds/resolveDev.js BE SC)

# Use profile to dynamically switch out the app specific docker image for the development image
profiles:
- name: local
  patches:
  - op: replace
    path: deployments.goblet-screencast.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
  - op: replace
    path: deployments.goblet-backend.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
- name: production
