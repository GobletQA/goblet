# yaml-language-server: $schema=container/devspace.yaml
version: v1beta11

# Currently we have to define some variables in the yaml that we want to use outside the valuesFiles key in the deployment section
# https://github.com/loft-sh/devspace/issues/1716

# All vars are loaded from the getYamlValue.js script
# This allows them to be loaded from the current ENV, the values.yml files, or a fallback
# See the ../scripts/js/getYamlValue.js script for more information
vars:

# ----- General Values ----- #
- name: GB_TOKEN
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_TOKEN"
- name: NPM_TOKEN
  source: command
  command: "node ../scripts/js/getYamlValue.js NPM_TOKEN"
- name: NODE_ENV
  source: command
  command: "node ../scripts/js/getYamlValue.js NODE_ENV"
- name: BUILD_LOCAL_IMAGE
  source: command
  command: "node ../scripts/js/getYamlValue.js BUILD_LOCAL_IMAGE false"
- name: IMAGE_PULL_POLICY
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE_PULL_POLICY Always"
- name: GB_NM_INSTALL
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_NM_INSTALL"

# ----- Docker Image Values ----- #
- name: IMAGE
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE"
- name: IMAGE_TAG
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE_TAG"

# ----- Backend API Values ----- #
- name: GB_BE_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_BE_DEPLOYMENT"
- name: GB_BE_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js BE"
- name: GB_BE_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_BE_PORT"
- name: GB_BE_WS_PATH
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_BE_WS_PATH"
- name: GB_NO_VNC_PATH
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_NO_VNC_PATH"

# ----- KinD Values ----- #
- name: GB_KD_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_DEPLOYMENT"
- name: GB_KD_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js KD"
- name: GB_KD_SERVICE_ACCOUNT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_SERVICE_ACCOUNT"
- name: GB_KD_ROLE_NAME
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_ROLE_NAME"
- name: GB_KD_ROLE_BINDING_NAME
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_ROLE_BINDING_NAME"
- name: GB_KD_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_PORT"
- name: GB_KD_KUBE_PROXY_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_KD_KUBE_PROXY_PORT"

# ----- Screencast API Values ----- #
- name: GB_SC_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_SC_DEPLOYMENT"
- name: GB_SC_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js SC"
- name: GB_SC_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_SC_PORT"
- name: GB_NO_VNC_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_NO_VNC_PORT"
- name: GB_SC_INGRESS_HOST
  source: command
  command: "node ../scripts/js/resolveHost.js SC"
- name: GB_SC_INGRESS_HOST_WILD_CARD
  source: command
  command: "node ../scripts/js/resolveHost.js SC \"*\""

# Load any pull secrets from the environment by calling the resolvePullSecrets.js script
# The script returns a formatted response as a string
# See the ../scripts/js/resolvePullSecrets.js script for more information
pullSecrets: $(node ../scripts/js/resolvePullSecrets.js)

# Defines if and how the docker image will be built before running it as a container
images:
  goblet-app:
    image: ${IMAGE}
    createPullSecret: true
    injectRestartHelper: false
    tags:
    - ${IMAGE_TAG}
    - '####-${NODE_ENV}-${devspace.git.commit}'
    dockerfile: ./Dockerfile
    context: ../
    build:
      disabled: true
      buildKit:
        options:
          buildArgs:
            NPM_TOKEN: ${NPM_TOKEN}

# The `deployments` section tells devspace how to deploy this project into the cluster
deployments: 

# ----- Backend API Deployment ----- #
- name: ${GB_BE_DEPLOYMENT}
  helm:
    upgradeArgs:
      - "--force"
    chart:
      name: ./
    cleanupOnFail: true
    valuesFiles:
    - ./values.empty.yaml
    values:
      # TODO: this is causing the backend to not be able to pull images from github
      # Need to investigate
      serviceAccountName: ${GB_KD_SERVICE_ACCOUNT}
      serviceAccountMeta:
        name: ${GB_KD_SERVICE_ACCOUNT}
        binding:
          name: ${GB_KD_ROLE_BINDING_NAME}
        role:
          name: ${GB_KD_ROLE_NAME}
          resources:
          - pods
          - pods/exec
          verbs:
          - create
          - delete
          - get
          - list
          - watch
      containers:
      - image: ${GB_BE_IMG_URI}
        imagePullPolicy: $(node ../scripts/js/resolvePullPolicy.js BE)
        env: $(node ../scripts/js/resolveDSEnvs.js backend docker-auth:user docker-auth:password)
      service: $(node ../scripts/js/resolveService.js BE $GB_BE_PORT)
      ingress: $(node ../scripts/js/resolveIngress.js BE $GB_BE_PORT "*" "$GB_BE_WS_PATH" "$GB_NO_VNC_PATH")

dev:
  # Gets the apps that should sync with the host machine
  sync: $(node ../scripts/js/resolveSync.js BE)
  ports: $(node ../scripts/js/resolvePortForward.js BE)

# Use profile to dynamically switch out the app specific docker image for the development image
profiles:
- name: local
  patches:
  - op: replace
    path: deployments.name=${GB_BE_DEPLOYMENT}.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
- name: production
