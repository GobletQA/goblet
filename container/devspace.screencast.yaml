# yaml-language-server: $schema=container/devspace.yaml
version: v1beta11

# Currently we have to define some variables in the yaml that we want to use outside the valuesFiles key in the deployment section
# https://github.com/loft-sh/devspace/issues/1716

# All vars are loaded from the getYamlValue.js script
# This allows them to be loaded from the current ENV, the values.yml files, or a fallback
# See the ../scripts/js/getYamlValue.js script for more information
vars:

# ----- General Values ----- #
- name: GB_TOKEN
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_TOKEN"
- name: NPM_TOKEN
  source: command
  command: "node ../scripts/js/getYamlValue.js NPM_TOKEN"
- name: NODE_ENV
  source: command
  command: "node ../scripts/js/getYamlValue.js NODE_ENV"
- name: BUILD_LOCAL_IMAGE
  source: command
  command: "node ../scripts/js/getYamlValue.js BUILD_LOCAL_IMAGE false"
- name: IMAGE_PULL_POLICY
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE_PULL_POLICY Always"
- name: GB_NM_INSTALL
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_NM_INSTALL"

# ----- Docker Image Values ----- #
- name: IMAGE
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE"
- name: IMAGE_TAG
  source: command
  command: "node ../scripts/js/getYamlValue.js IMAGE_TAG"

# ----- Screencast API Values ----- #
- name: GB_SC_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_SC_DEPLOYMENT"
- name: GB_SC_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js SC"
- name: GB_SC_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_SC_PORT"
- name: GB_NO_VNC_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_NO_VNC_PORT"
- name: GB_SC_INGRESS_HOST
  source: command
  command: "node ../scripts/js/resolveIngress.js SC"
- name: GB_SC_INGRESS_HOST_WILD_CARD
  source: command
  command: "node ../scripts/js/resolveIngress.js SC \"*\""

# ----- Frontend Values ----- #
- name: GB_FE_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_FE_DEPLOYMENT"
- name: GB_FE_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js FE"
- name: GB_FE_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_FE_PORT"

# ----- Backend API Values ----- #
- name: GB_BE_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_BE_DEPLOYMENT"
- name: GB_BE_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js BE"
- name: GB_BE_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_BE_PORT"

# ----- DinD Values ----- #
- name: GB_DD_DEPLOYMENT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_DEPLOYMENT"
- name: GB_DD_IMG_URI
  source: command
  command: "node ../scripts/js/resolveImgUri.js DD"
- name: GB_DD_DOCKER_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_DOCKER_PORT"
- name: GB_DD_PRIVILEGED
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_PRIVILEGED"
- name: GB_DD_EXP_ADMIN_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_EXP_ADMIN_PORT"
- name: GB_DD_LOCAL_ADMIN_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_LOCAL_ADMIN_PORT"
- name: GB_DD_PROXY_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_PROXY_PORT"
- name: GB_DD_VNC_PROXY_PORT
  source: command
  command: "node ../scripts/js/getYamlValue.js GB_DD_VNC_PROXY_PORT"



# Load any pull secrets from the environment by calling the resolvePullSecrets.js script
# The script returns a formatted response as a string
# See the ../scripts/js/resolvePullSecrets.js script for more information
pullSecrets: $(node ../scripts/js/resolvePullSecrets.js)

# Defines if and how the docker image will be built before running it as a container
images:
  goblet-screencast:
    image: ${IMAGE}
    createPullSecret: true
    injectRestartHelper: false
    tags:
    - ${IMAGE_TAG}
    - '####-${NODE_ENV}-${devspace.git.commit}'
    dockerfile: ./Dockerfile
    context: ../
    build:
      # Expression to disable building the image only when BUILD_LOCAL_IMAGE is true
      disabled: $([ ${BUILD_LOCAL_IMAGE} == "true" ] && echo false || echo true)
      buildKit:
        options:
          buildArgs:
            NPM_TOKEN: ${NPM_TOKEN}

# The `deployments` section tells devspace how to deploy this project into the cluster
deployments:
# TODO: Convert screencast deployment to be consistent with other deployments
# ----- Screencast API Deployment ----- #
- name: ${GB_SC_DEPLOYMENT}
  helm:
    chart:
      name: ./
    cleanupOnFail: true
    valuesFiles:
    - ./values.yml
    - ./values.${NODE_ENV}.yml
    values:
      containers:
      - image: ${GB_SC_IMG_URI}
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        env: $(node ../scripts/js/resolveDSEnvs.js screencast)
      service:
        name: ${GB_SC_DEPLOYMENT}
        ports:
        # Screencast API Port
        - port: ${GB_SC_PORT}
        # NoVnc Websocket Port
        - port: ${GB_NO_VNC_PORT}
      ingress:
        name: ${GB_SC_DEPLOYMENT}-ingress
        rules:
        - host: ${GB_SC_INGRESS_HOST}
          serviceName: ${GB_SC_DEPLOYMENT}
          servicePort: ${GB_SC_PORT}
        - host: ${GB_SC_INGRESS_HOST_WILD_CARD}
          serviceName: ${GB_SC_DEPLOYMENT}
          servicePort: ${GB_SC_PORT}
        - host: ${GB_SC_INGRESS_HOST}
          serviceName: ${GB_SC_DEPLOYMENT}
          servicePort: ${GB_NO_VNC_PORT}
        - host: ${GB_SC_INGRESS_HOST_WILD_CARD}
          serviceName: ${GB_SC_DEPLOYMENT}
          servicePort: ${GB_NO_VNC_PORT}

- name: ${GB_DD_DEPLOYMENT}
  helm:
    chart:
      name: ./
    cleanupOnFail: true
    valuesFiles:
    - ./values.yml
    - ./values.${NODE_ENV}.yml
    values:
      containers:
      - name: ${GB_DD_DEPLOYMENT}
        image: ${GB_DD_IMG_URI}
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        env: $(node ../scripts/js/resolveDSEnvs.js dind)
        # TODO: use sysbox or gvisor to remove the need for privileged context
        securityContext:
          privileged: ${GB_DD_PRIVILEGED}
      service:
        name: ${GB_DD_DEPLOYMENT}
        ports:
        - port: ${GB_DD_DOCKER_PORT}
        - port: ${GB_DD_PROXY_PORT}
        - port: ${GB_DD_VNC_PROXY_PORT}
        - port: ${GB_DD_EXP_ADMIN_PORT}
          containerPort: ${GB_DD_LOCAL_ADMIN_PORT}

# ----- Frontend Deployment ----- #
- name: ${GB_FE_DEPLOYMENT}
  helm:
    chart:
      name: ./
    cleanupOnFail: true
    valuesFiles:
    - ./values.yml
    - ./values.${NODE_ENV}.yml
    values:
      containers:
      - image: ${GB_FE_IMG_URI}
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        env: $(node ../scripts/js/resolveDSEnvs.js frontend)
      service:
        name: ${GB_FE_DEPLOYMENT}
        ports:
        - port: ${GB_FE_PORT}
      ingress:
        name: ${GB_FE_DEPLOYMENT}-ingress
        rules:
        - host: $(node ../scripts/js/resolveIngress.js FE)
          serviceName: ${GB_FE_DEPLOYMENT}
          servicePort: ${GB_FE_PORT}


# ----- Backend API Deployment ----- #
- name: ${GB_BE_DEPLOYMENT}
  helm:
    chart:
      name: ./
    cleanupOnFail: true
    valuesFiles:
    - ./values.yml
    - ./values.${NODE_ENV}.yml
    values:
      containers:
      - image: ${GB_BE_IMG_URI}
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        env: $(node ../scripts/js/resolveDSEnvs.js backend docker-auth:user docker-auth:password)
      service:
        name: ${GB_BE_DEPLOYMENT}
        ports:
        - port: ${GB_BE_PORT}
      ingress:
        name: ${GB_BE_DEPLOYMENT}-ingress
        rules:
        - host: $(node ../scripts/js/resolveIngress.js BE)
          serviceName: ${GB_BE_DEPLOYMENT}
          servicePort: ${GB_BE_PORT}
        - host: $(node ../scripts/js/resolveIngress.js BE "*")
          serviceName: ${GB_BE_DEPLOYMENT}
          servicePort: ${GB_BE_PORT}


dev:
  # Gets the apps that should sync with the host machine
  sync: $(node ../scripts/js/resolveSync.js GB_FE_ACTIVE GB_BE_ACTIVE GB_DD_ACTIVE GB_SC_ACTIVE)

  # Gets the ports that should be exposed to the host machine from the running pod
  # ports: $(node ../scripts/js/resolvePortForward.js GB_FE_ACTIVE ${GB_FE_PORT} GB_BE_ACTIVE ${GB_BE_PORT} GB_DD_ACTIVE ${GB_DD_PROXY_PORT} ${GB_DD_EXP_ADMIN_PORT})
  ports: $(node ../scripts/js/resolvePortForward.js GB_FE_ACTIVE ${GB_FE_PORT} GB_BE_ACTIVE ${GB_BE_PORT})

  # The `open` field tells DevSpace to open a URL as soon as it returns HTTP status 200
  # Since we configured port-forwarding, we can use a localhost address here to access our application
  open: $(node ../scripts/js/resolveOpenBrowser.js GB_FE_ACTIVE ${GB_FE_PORT})


# Use profile to dynamically switch out the app specific docker image for the development image
profiles:
- name: local
  patches:
  - op: replace
    path: deployments.name=${GB_SC_DEPLOYMENT}.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
  - op: replace
    path: deployments.name=${GB_FE_DEPLOYMENT}.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
  - op: replace
    path: deployments.name=${GB_BE_DEPLOYMENT}.helm.values.containers[0].image
    value: ${IMAGE}:${IMAGE_TAG}
- name: staging
- name: production
