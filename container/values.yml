
# See here https://devspace.cloud/docs/cli/deployment/components/configuration/overview-specification
# For information on how to configure this file,

# A list of containers that should run the pods of this component
containers: []
initContainers: []

service:
  # type: NodePort
  type: ClusterIP
  labels: {}
  annotations: {}
  ports: []
  externalIPs: []

labels: {}
annotations: {}

ingress:
  ingressClassName: nginx
  labels: {}
  annotations: {}
  rules: []

# Defines image pull secrets
# DevSpace CLI will append all pull secrets which are automatically created
# More infos on: https://devspace.cloud/docs/cli/image-building/workflow-basics#8-create-image-pull-secret
pullSecrets: []


env:

# ---- General Shared ENVs ---- #
  BUILDKIT_INLINE_CACHE: 1
  IMAGE_TAG: latest
  DISPLAY: ":0.0"
  DOCKER_REGISTRY: ghcr.io
  IMAGE: 'ghcr.io/gobletqa/goblet-app'
  GB_NODE_VERSION: 20.3.0
  # **IMPORTANT** - Must exactly match the version use in $GB_BASE_IMAGE_FROM
  PLAYWRIGHT_BROWSERS_VERSION: 1.35.0
  GB_GIT_GLOBAL_IGNORE: /goblet/.gitignore

  # Log file for all playwright logs
  # Gets set in container/scripts/resolveDSEnvs.js for screencast deployment
  PW_DEBUG_FILE: /goblet/app/logs/pwlogs.log

  GB_KUBE_SCRT_DOC_AUTH: docker-auth
  GB_KUBE_SCRT_FB_SA: firebase-sa

# ---- Goblet Action Shared ENVs ---- #
# These ENVs should be overwritten by the github action
  GB_ACT_IMAGE_TAG: latest
  
  GB_ACT_PORT: ''
  GB_ACT_DEPLOYMENT: goblet-action
  GB_ACT_IMAGE: 'ghcr.io/gobletqa/goblet-action'
  GB_ACT_IMAGE_FROM: 'mcr.microsoft.com/playwright:v1.35.0-focal'

  GOBLET_MOUNT_ROOT: /goblet/repos

  # Production url for gobletqa
  GB_GOBLET_URL: https://www.gobletqa.com

# ---- Goblet Shared ENVs ---- #
  GB_TOKEN: a-10K3n-g0bLe1
  GB_SH_LOCAL_MOUNT: goblet-local/current
  GB_SERVER_ORIGINS: 'http://localhost:19006,localhost,gobletqa.app,dev.gobletqa.app,gobletqa-develop.local.keghub.io,backend.dev.gobletqa.app'

  GB_WS_TRANSPORTS: websocket

  # ---- Docker Images ---- #
  # Image tags added to all built images
  GB_IMAGE_BUILD_TAGS: values,package
  # Then, all sub goblet images are built from the goblet-base image
  GB_IMAGE_FROM: ghcr.io/gobletqa/goblet-base:latest

  # ---- Logger ENVs ---- #
  # Enable to set custom log-level for conductor
  GB_LOG_LEVEL: debug
  GB_LOG_LABEL: Goblet
  GB_LOG_DISABLED: false
  GB_LOG_EXIT_ON_ERR: false
  GB_LOG_PRETTY_PRINT: true
  GB_LOG_HANDLE_EXCEPTION: true

# ---- App Development ENVs ---- #
  # Needed for conductor
  # Uncomment this to mount the whole repo into the container
  # GB_APP_DOC_VOLUMES: ".:/goblet/app,/var/run/docker.sock"
  GB_AUTH_ACTIVE: true
  GB_APP_MOUNT_PATH: /goblet/app


# ---- Base ENVs ---- #
  GB_BS_IMAGE_TAG: latest
  GB_BS_DEPLOYMENT: goblet-base
  GB_BS_IMAGE: ghcr.io/gobletqa/goblet-base
  # This only works if the dockerfile has args GB_IMAGE_FROM && IMAGE_FROM configured
  GB_BS_IMAGE_FROM: 'mcr.microsoft.com/playwright:v1.35.0-focal'


# ---- Backend ENVs ---- #
  GB_BE_PORT: 7005
  GB_BE_SECURE_PORT: 443
  # Host the FE uses to connect to the BE
  GB_BE_HOST: 0.0.0.0

  # Default to the backend api and host
  # But should be set when running as own server
  GB_BE_IMAGE_TAG: latest
  GB_BE_DEPLOYMENT: goblet-backend
  GB_BE_IMAGE: 'ghcr.io/gobletqa/goblet-backend'
  # GB_BE_IMAGE_FROM: 'ubuntu:20.04'

  # ---- Backend Websocket ENVs ---- #
  GB_BE_WS_PATH: /goblet-socket
  GB_BE_WS_PROTOCOL: http

  # --- Backend JWT AUTH --- #
  GB_BE_JWT_EXP: '7200000'
  GB_BE_JWT_CREDENTIALS: true
  GB_BE_JWT_REFRESH_EXP: '7200000'
  GB_BE_JWT_SECRET: k3G-H3rkiN-1234
  GB_BE_JWT_KEY: goblet-be-auth-token
  GB_BE_JWT_REFRESH_SECRET: 4926-G0b13T-g3K

  # --- Backend COOKIE AUTH --- #
  # GB_BE_COOKIE_SECRET: ""
  GB_BE_COOKIE_SECURE: true
  GB_BE_COOKIE_NAME: goblet
  GB_BE_COOKIE_HTTP_ONLY: true
  GB_BE_COOKIE_OVERWRITE: true
  GB_BE_COOKIE_SAME_SITE: None
  GB_BE_COOKIE_KEY: goblet-cookie-7979

  # Disable certs in local. Set to the cluster issuer name in values.<env>.yaml file for ssl
  GB_BE_SECRET_TLS_NAME: false

# ---- Frontend ENVs ---- #
  GB_FE_PORT: 19006
  GB_FE_IMAGE_TAG: latest
  # Time to wait until User will be automatically signed out (seconds) i.e. 2700 === 45min
  GB_FE_IDLE_TIMEOUT: 2700
  # Time to wait until showing the Idle timeout model (seconds) i.e. 1800 === 30min
  GB_FE_IDLE_PROMPT_TIMEOUT: 1800
  # Time to wait until showing an error message when checking the session container status (seconds)
  GB_FE_CONTAINER_WAIT: 20
  # Time to wait between each check for the backend session container (seconds)
  GB_FE_CONTAINER_CHECK_INTERVAL: 4

  # Time to wait between reconnect attempts for the frontend websocket, **NOT VNC**
  GB_FE_WS_RECONNECT_INTERVAL: 5
  # Number of reconnect attempts to make for the frontend websocket, **NOT VNC**
  GB_FE_WS_RECONNECT_ATTEMPTS: 30

  GB_FE_DEPLOYMENT: goblet-frontend
  GB_FE_IMAGE: 'ghcr.io/gobletqa/goblet-frontend'
  GB_FE_MOUNT_PATH: .:/goblet/app

# --- CONDUCTOR ENVs --- #
  # GB_CD_HOST: host.docker.internal
  GB_CD_HOST: local.gobletqa.app
  GB_CD_SUB_DOMAIN: conductor

  GB_CD_PIDS_LIMIT: 500
  GB_CD_RATE_LIMIT: 5000
  # TOOD: add this to set a timeout on a spawned container
  GB_CD_CONTAINER_TIMEOUT: 50000
  # Salting the user hash string. Not intended to be secure just anonymous
  GB_CD_HASH_KEY: C0nDuc10R
  GB_CD_CONTROLLER_TYPE: Kube

  # Timeout for the kube listener
  # Will kill and restart the listener on an interval
  # Works around issue where listener stops responding after some amount of time
  GB_CD_LISTENER_TIMEOUT: 250000

  # Conductor controller validation
  GB_CD_VALIDATION_KEY: "gb-cd-1234567"
  GB_CD_VALIDATION_HEADER: GB-CD-Validation-Key

  GB_CD_FORWARD_HOST_HEADER: x-goblet-host
  GB_CD_FORWARD_PORT_HEADER: x-goblet-port
  GB_CD_FORWARD_PROTO_HEADER: x-goblet-proto
  GB_CD_FORWARD_ROUTE_HEADER: x-goblet-route
  GB_CD_FORWARD_SUBDOMAIN_HEADER: x-goblet-subdomain

  # --- Certs ENVs --- #
  GB_CR_DEBUG: true
  GB_CR_CHART_TAG: 0.0.1
  GB_CR_MANAGE_ALL_NS: true
  GB_CR_DEPLOYMENT: goblet-certs
  GB_CR_CHART_URL: oci://ghcr.io/gobletqa/goblet-certs-chart

  GB_CR_SECRET_KEY: api-key
  GB_CR_SECRET: provider-auth
  GB_CR_USER_EMAIL: lancetipton04@gmail.com
  GB_CR_SECRET_ENV: ""
  GB_CR_SECRET_VALUE_PATH: ""

# --- SCREENCAST ENVs --- #
  GB_SC_IMAGE_TAG: latest
  GB_SC_DEPLOYMENT: goblet-screencast
  GB_SC_IMAGE: 'ghcr.io/gobletqa/goblet-screencast'
  # Screencast API port
  GB_SC_PORT: 7006
  # URL where the screencast is being displayed
  # This is the URL of the server the proxy connects to
  # Update this to call an externally available VNC websocket host
  GB_SC_HOST: 0.0.0.0

  GB_SC_WS_PATH: /goblet-socket

  # Port to forward connections from backend API to screencast
  GB_NO_VNC_PORT: 26369
  GB_NO_VNC_HOST: 0.0.0.0
  GB_NO_VNC_PATH: /novnc
  GB_NO_VNC_PROTOCOL: http

  # Host of VNC server for tigerVNC, that receives requests from the proxy
  # This is internal, and generally should not change
  GB_VNC_SERVER_HOST: 0.0.0.0
  GB_VNC_SERVER_PORT: 26370

  # Original
  # GB_VNC_VIEW_HEIGHT: 720
  # GB_VNC_VIEW_WIDTH: 1440

  # Width for wide-screen
  # GB_VNC_VIEW_HEIGHT: 1280
  # GB_VNC_VIEW_WIDTH: 1615

  # Width for mac-16in
  GB_VNC_VIEW_HEIGHT: 1430
  GB_VNC_VIEW_WIDTH: 1615

  # Width for wide-wide-screen
  # GB_VNC_VIEW_HEIGHT: 1980
  # GB_VNC_VIEW_WIDTH: 1615


  GB_VNC_ACTIVE: true
  GB_PW_SOCKET_ACTIVE: false

  # --- CONTAINER TIMEOUT ENVs --- #
  GB_SC_IDLE_DEBUG: true
  GB_SC_IDLE_TIMEOUT_ACTIVE: false
  # Interval in seconds that the inactive check will run
  GB_SC_IDLE_INTERVAL: 20
  # Number of times the inactive check can be true before shutting down the container
  GB_SC_IDLE_THRESHOLD: 4
  # Time in seconds to wait before starting to check for active connections, i.e. 180 === 3min
  GB_SC_IDLE_WAIT_TO_START: 120
  # Max number of connections that can exist to consider the container to be idle
  GB_SC_IDLE_CONNECTION_THRESHOLD: 2

  # Mount the app directory in the screencast repo
  # GB_SC_MOUNT_PATH: .:/goblet/app

# --- DIND ENVs --- #
  GB_DD_DOCKER_PORT: 2375
  GB_DD_DOCKER_HOST: 0.0.0.0
  # Required for dind
  GB_DD_PRIVILEGED: true
  GB_DD_IMAGE_TAG: latest
  GB_DD_NETWORK: goblet-proxy
  GB_DD_DEPLOYMENT: goblet-dind
  GB_DD_IMAGE: 'ghcr.io/gobletqa/goblet-dind'
  GB_DD_IMAGE_FROM: 'ubuntu:20.04'
  
  # Path where caddy will store files
  GB_DD_CADDY_REMOTE_DIR: /goblet/remote

  # Exposed Port used for all container API proxies
  GB_DD_API_PROXY_PORT: 2121

  # Exposed Port used for all container websocket proxies
  GB_DD_WS_PROXY_PORT: 2122

  # Exposed Port used for all container VNC proxies
  GB_DD_VNC_PROXY_PORT: 2123

  # Must be localhost due to caddy config, if can not be an ip address
  GB_DD_CADDY_HOST: goblet-dind
  GB_DD_EXP_ADMIN_PORT: 2018
  GB_DD_LOCAL_ADMIN_PORT: 2019

  # If set to true, the screencast container will be managed automatically
  # Instead of starting a new session container for each user
  # Only one container will be started at the same time as the backend api container
  # And all proxy traffic will be directed to that container
  # It uses dev-space instead of the kubernetes API, so all the same hot-reload benefits are included
  # This makes local development way easier
  GB_LOCAL_DEV_MODE: false

# --- KIND ENVs --- #
  GB_KD_DEPLOYMENT: goblet-kind
  GB_KD_ROLE_NAME: goblet-modify-pods
  GB_KD_SERVICE_ACCOUNT: goblet-pods-exec
  GB_KD_ROLE_BINDING_NAME: goblet-pods-role-binding

  # Exposed Port used for all container API proxies
  GB_KD_PORT: 2375
  GB_KD_HOST: 0.0.0.0
  GB_KD_SECURE_PORT: 443
  GB_KD_WS_PROXY_PORT: 2122
  GB_KD_VNC_PROXY_PORT: 2123
  GB_KD_WS_PATH: /goblet-socket


  GITLAB_CLIENT_ID: ""
  GITLAB_CLIENT_SECRET: ""
  GITLAB_API_URL: gitlab.com
  GITLAB_AUTH_URL: https://gitlab.com
  GITLAB_GRAPH_URL: https://gitlab.com/api/graphql

  GITHUB_API_URL: api.github.com
  GITHUB_GRAPH_URL: https://api.github.com/graphql

  # Appwrite ENVs
  GB_APPWRITE_PROJECT: goblet-dev
  GB_APPWRITE_URL: https://cloud.appwrite.io/v1


  # --- WORKFLOW ENVs --- #
  GB_GIT_REMOTE_REF: goblet-ref
  GB_SECRETS_TAG_REF: goblet-do-not-delete
