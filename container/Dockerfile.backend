ARG GB_IMAGE_FROM=ubuntu:20.04
ARG IMAGE_FROM=$GB_IMAGE_FROM

# ---- Setup Stage ---- #
FROM $IMAGE_FROM as goblet-setup
WORKDIR /goblet/app
ENV GB_SUB_REPO=backend
COPY container/scripts/docker/be.entrypoint.sh /entrypoint.sh
COPY .nvmrc .nvmrc 

RUN <<EOF
  set -eux;

  # Enabel all sources
  sed -i 's/# deb/deb/g' /etc/apt/sources.list

  # Preinstall any dependecies for settting up the image
  apt-get update && apt-get install --yes --no-install-recommends \
    gpg \
    curl \
    nano \
    docker \
    iptables \
    openssh-client \
    ca-certificates \
    debian-keyring \
    apt-transport-https \
    debian-archive-keyring

  # Install Node.js and yarn
  NODE_VER=$(cat ./.nvmrc | cut -d "." -f 1)
  curl -sL https://deb.nodesource.com/setup_${NODE_VER:-16}.x | bash -
  apt-get install -y nodejs
  npm install -g yarn
  yarn global add turbo

  # Download kubectl
  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  chmod +x kubectl
  mkdir -p ~/.local/bin
  mv ./kubectl ~/.local/bin/kubectl

  rm -rf /var/lib/apt/lists/*
  rm -rf /var/lib/apt/lists.d/*
  apt-get autoremove
  apt-get clean
  apt-get autoclean

  chmod a+x /entrypoint.sh
EOF

# ---- End Stage ---- #

# ---- Prune Stage ---- #
FROM goblet-setup as goblet-pruner
WORKDIR /goblet/app
COPY . .
RUN turbo prune --docker --scope=@gobletqa/backend
COPY ./configs ./out/full/configs
COPY ./gobletRoot.js ./out/full/gobletRoot.js
COPY ./tsconfig.json ./out/full/tsconfig.json
# ---- End Stage ---- #

# ---- Install Stage ---- #
FROM goblet-setup as goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
COPY --from=goblet-pruner /goblet/app/out/yarn.lock ./yarn.lock
RUN yarn install
# ---- End Stage ---- #

# ---- Build Stage ---- #
FROM goblet-setup as goblet-builder
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/full/ .
COPY --from=goblet-installer /goblet/app/ .
WORKDIR /goblet/app/repos/backend
RUN yarn build:goblet && \
    yarn build:docker && \
    yarn install --frozen-lockfile --production

WORKDIR /goblet/app
RUN <<EOF
  mkdir -p /goblet-runner/repos/backend/scripts
  mkdir -p /goblet-runner/configs
  cp -R /goblet/app/node_modules /goblet-runner/node_modules
  cp -R /goblet/app/repos/backend/dist /goblet-runner/repos/backend/dist
  cp -R /goblet/app/repos/shared/src/templates /goblet-runner/repos/backend/templates
  cp -R /goblet/app/repos/backend/node_modules /goblet-runner/repos/backend/node_modules
  cp -R /goblet/app/repos/backend/package.json /goblet-runner/repos/backend/package.json
  cp -R /goblet/app/repos/backend/tsconfig.json /goblet-runner/repos/backend/tsconfig.json
  cp -R /goblet/app/repos/backend/dist/pullImages.ts /goblet-runner/repos/backend/scripts/pullImages.ts
  cp -R /goblet/app/repos/backend/dist/goblet.default.config.js /goblet-runner/configs/goblet.default.config.js
EOF
# ---- End Stage ---- #

# ---- Run Stage ---- #
FROM goblet-setup as goblet-runner
WORKDIR /goblet/app

ARG GB_BE_PORT=7005
ARG GB_NO_VNC_PORT=26369
ARG GB_DD_API_PROXY_PORT=2121
ARG GB_DD_WS_PROXY_PORT=2122
ARG GB_DD_VNC_PROXY_PORT=2123
ARG GB_DD_DEPLOYMENT

ENV HOME=/root \
    DISPLAY=:0.0 \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    DEBUG=pw:* \
    GB_SUB_REPO=backend \
    GB_BE_PORT=$GB_BE_PORT \
    GB_NO_VNC_PORT=$GB_NO_VNC_PORT \
    DEBIAN_FRONTEND=noninteractive \
    GB_DD_WS_PROXY_PORT=$GB_DD_WS_PROXY_PORT \
    GB_DD_API_PROXY_PORT=$GB_DD_API_PROXY_PORT \
    GB_DD_VNC_PROXY_PORT=$GB_DD_VNC_PROXY_PORT \
    PATH=$PATH:/usr/local/share/.config/yarn/global/node_modules/.bin

COPY --from=goblet-builder /goblet-runner /goblet/app

WORKDIR /goblet/app/repos/backend
EXPOSE $GB_BE_PORT
EXPOSE $GB_NO_VNC_PORT

ENTRYPOINT ["/entrypoint.sh"]
CMD [ "yarn", "serve" ]
