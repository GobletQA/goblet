ARG GB_IMAGE_FROM=node:16.16.0-alpine3.16
ARG IMAGE_FROM=$GB_IMAGE_FROM

# ---- Prune App Stage ---- #
FROM $IMAGE_FROM as goblet-pruner
WORKDIR /goblet/app
RUN yarn global add turbo
COPY . .
RUN turbo prune --docker --scope=@gobletqa/backend
COPY ./configs ./out/full/configs
COPY ./gobletRoot.js ./out/full/gobletRoot.js
# ---- End Stage ---- #

# ---- Install Stage ---- #
FROM $IMAGE_FROM as goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
COPY --from=goblet-pruner /goblet/app/out/yarn.lock ./yarn.lock
RUN yarn install --frozen-lockfile
# ---- End Stage ---- #

# ---- Build Stage ---- #
FROM $IMAGE_FROM as goblet-builder
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/full/ .
COPY --from=goblet-installer /goblet/app/ .
WORKDIR /goblet/app/repos/backend
RUN yarn build:script
WORKDIR /goblet/app
RUN yarn global add turbo
RUN turbo run build --filter=@gobletqa/backend && \
    yarn install --frozen-lockfile --production
RUN <<EOF
  mkdir -p /goblet-runner/repos/backend/scripts
  cp -R /goblet/app/node_modules /goblet-runner/node_modules
  cp -R /goblet/app/repos/backend/dist /goblet-runner/repos/backend/dist
  cp -R /goblet/app/repos/shared/src/templates /goblet-runner/repos/backend/templates
  cp -R /goblet/app/repos/backend/node_modules /goblet-runner/repos/backend/node_modules
  cp -R /goblet/app/repos/backend/package.json /goblet-runner/repos/backend/package.json
  cp -R /goblet/app/repos/backend/tsconfig.json /goblet-runner/repos/backend/tsconfig.json
  cp -R /goblet/app/repos/backend/dist/pullImages.ts /goblet-runner/repos/backend/scripts/pullImages.ts
EOF
# ---- End Stage ---- #

# ---- Run Stage ---- #
FROM $IMAGE_FROM as goblet-runner
WORKDIR /goblet/app

RUN <<EOF
  set -eux;
  echo "#! /bin/sh" >> /entrypoint.sh
  echo "if [ \"\$GOBLET_DIND_SERVICE_PORT\" ]; then" >> /entrypoint.sh
  echo "  export GOBLET_DIND_SERVICE_HOST=\${GOBLET_DIND_SERVICE_HOST:-0.0.0.0}" >> /entrypoint.sh
  echo "  export GOBLET_DIND_SERVICE_PORT=\${GOBLET_DIND_SERVICE_PORT:-2573}" >> /entrypoint.sh
  echo "  GB_DIND_HOST=\${GB_DD_DEPLOYMENT:-\$GOBLET_DIND_SERVICE_HOST}" >> /entrypoint.sh
  echo "  export DOCKER_HOST=\"tcp://\$GB_DIND_HOST:\$GOBLET_DIND_SERVICE_PORT\"" >> /entrypoint.sh
  echo "  echo \"\$DOCKER_AUTH_PASSWORD\" | docker login \$DOCKER_REGISTRY --username \$DOCKER_AUTH_USER --password-stdin" >> /entrypoint.sh
  echo "  yarn pull &" >> /entrypoint.sh
  echo "fi" >> /entrypoint.sh
  echo "exec \$@" >> /entrypoint.sh
  chmod a+x /entrypoint.sh
  apk add docker
EOF

ARG GB_BE_PORT=7005
ARG GB_NO_VNC_PORT=26369
ARG GB_DD_API_PROXY_PORT=2121
ARG GB_DD_WS_PROXY_PORT=2122
ARG GB_DD_VNC_PROXY_PORT=2123
ARG GB_DD_DEPLOYMENT

ENV HOME=/root \
    DISPLAY=:0.0 \
    DEBUG=pw:api* \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    GB_BE_PORT=$GB_BE_PORT \
    GB_NO_VNC_PORT=$GB_NO_VNC_PORT \
    DEBIAN_FRONTEND=noninteractive \
    GB_DD_WS_PROXY_PORT=$GB_DD_WS_PROXY_PORT \
    GB_DD_API_PROXY_PORT=$GB_DD_API_PROXY_PORT \
    GB_DD_VNC_PROXY_PORT=$GB_DD_VNC_PROXY_PORT \
    PATH=$PATH:/usr/local/share/.config/yarn/global/node_modules/.bin

COPY --from=goblet-builder /goblet-runner /goblet/app

WORKDIR /goblet/app/repos/backend
EXPOSE $GB_BE_PORT
EXPOSE $GB_NO_VNC_PORT

ENTRYPOINT ["/entrypoint.sh"]
CMD [ "yarn", "serve" ]
