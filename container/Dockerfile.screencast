ARG GB_IMAGE_FROM=mcr.microsoft.com/playwright:v1.32.0-focal
ARG IMAGE_FROM=$GB_IMAGE_FROM

FROM $IMAGE_FROM as goblet-pnpm
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"
RUN npm install --global pnpm

# ---- Turbo Stage ---- #
FROM goblet-pnpm as goblet-turbo
RUN pnpm add --global turbo dot-json
# ---- End Stage ---- #

# ---- Prune Stage ---- #
FROM goblet-turbo as goblet-pruner
WORKDIR /goblet/app
COPY . .
RUN <<EOF
  set -eux;

  rm -rf /goblet/app/repos/backend
  rm -rf /goblet/app/repos/conductor

  cd /goblet/app/repos/screencast
  pnpm json:rm

  cd /goblet/app/repos/testUtils
  pnpm json:rm

  cd /goblet/app/repos/workflows
  pnpm json:rm

  cd /goblet/app/repos/shared
  pnpm json:rm

  cd /goblet/app/repos/workflows
  pnpm json:rm

  cd /goblet/app
  pnpm json:rm

  pnpm config set network-timeout 600000

EOF
# The test-utils repo has a dependecy on the screencast repo
# So by pruning the test-utils repo, we get the screencast repo
# Plus all other code needed to execute tests
RUN turbo prune --docker --scope=@gobletqa/test-utils
RUN <<EOF
  set -eux;
  cp .nvmrc out/json/.nvmrc
  cp pnpm-lock.yaml out/json/pnpm-lock.yaml

  cp -r tasks out/full/tasks
  cp -r configs out/full/configs
  cp gobletRoot.js out/full/gobletRoot.js
  cp tsconfig.json out/full/tsconfig.json
  mkdir -p out/full/logs
  mkdir -p out/full/.tmp
  mkdir -p out/full/temp

  rm -rf out/full/.turbo
  rm -rf out/full/pnpm-lock.yaml
  rm -rf out/full/.turbo.json

  # Remove unused tasks in the container
  # Then replace the default tasks with the sc-entry tasks
  rm -rf out/full/tasks/definitions/index.ts
  rm -rf out/full/tasks/definitions/kube
  rm -rf out/full/tasks/definitions/deploy
  rm -rf out/full/tasks/definitions/docker
  rm -rf out/full/tasks/definitions/devspace
  mv out/full/tasks/definitions/sc-entry.ts out/full/tasks/definitions/index.ts

EOF
# ---- End Stage ---- #

# ---- Install Stage ---- #
FROM goblet-turbo as goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
RUN pnpm install --fix-lockfile --shamefully-hoist
# ---- End Stage ---- #

# ---- Build Stage ---- #
FROM goblet-turbo as goblet-builder
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/full/ .
COPY --from=goblet-installer /goblet/app/ .
WORKDIR /goblet/app/repos/screencast
RUN pnpm build:docker && \
    pnpm install --fix-lockfile --shamefully-hoist
# ---- End Stage ---- #

# # ---- Run Stage ---- #
FROM goblet-pnpm as goblet-runner
WORKDIR /goblet/app

RUN apt-get update && apt-get install -y --no-install-recommends \
    novnc \
    net-tools \
    supervisor \
    tigervnc-standalone-server; \
    apt-get clean && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/cache/apk/* && \
    ln -s /goblet/app/node_modules $HOME/.node_modules && \
    ln -s /goblet/app/node_modules /goblet/node_modules && \
    mkdir -p /etc/supervisor && \
    dbus-uuidgen > /var/lib/dbus/machine-id && \
    mkdir -p /var/run/dbus

COPY --from=goblet-builder /goblet/app/. .

WORKDIR /goblet/app/repos/screencast
ARG GB_SC_PORT=7006
ARG GB_NO_VNC_PORT=26369
ARG GB_VNC_SERVER_PORT=26370
ARG PW_DEBUG_FILE=/goblet/app/logs/pwlogs.log
ARG DEBUG_FILE=$PW_DEBUG_FILE

ENV DEBUG_FILE=$DEBUG_FILE \
    GB_SC_PORT=$GB_SC_PORT \
    GB_SUB_REPO=screencast \
    GB_NO_VNC_PORT=$GB_NO_VNC_PORT \
    GB_VNC_SERVER_PORT=$GB_VNC_SERVER_PORT \
    HOME=/root \
    DISPLAY=:0.0 \
    DEBUG=pw:* \
    PWDEBUG=console \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    DEBIAN_FRONTEND=noninteractive \
    DBUS_SYSTEM_BUS_ADDRESS=unix:path=/var/run/dbus/system_bus_socket
    # See here => https://georgik.rocks/how-to-start-d-bus-in-docker-container/
    # Explains how to run dbus in docker container
    # Seems to be needed for Playwright

EXPOSE $GB_SC_PORT
EXPOSE $GB_NO_VNC_PORT
EXPOSE $GB_VNC_SERVER_PORT

CMD [ "/bin/bash", "scripts/initialize.sh" ]