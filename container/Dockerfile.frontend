ARG GB_IMAGE_FROM=node:16.16.0-alpine3.16
ARG IMAGE_FROM=$GB_IMAGE_FROM

# ---- Prune App Stage ---- #
FROM $IMAGE_FROM AS goblet-pruner
ARG NPM_TOKEN
ENV NPM_TOKEN=$NPM_TOKEN
WORKDIR /goblet/app
RUN yarn global add turbo
COPY . .
RUN turbo prune --docker --scope=@gobletqa/frontend
# ---- End Stage ---- #

# ---- Install Dependencies Stage ---- #
FROM $IMAGE_FROM AS goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
COPY --from=goblet-pruner /goblet/app/out/yarn.lock ./yarn.lock
RUN yarn install --frozen-lockfile
# ---- End Stage ---- #

# ---- Build App Stage ---- #
FROM $IMAGE_FROM AS goblet-builder
WORKDIR /goblet/app
ENV HOME=/root \
    DISPLAY=:0.0 \
    DEBUG=pw:api* \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    EXPO_CLI_VERSION=5.3.2 \
    DEBIAN_FRONTEND=noninteractive \
    PATH=$PATH:/usr/local/share/.config/yarn/global/node_modules/.bin

COPY --from=goblet-pruner /goblet/app/tsconfig* .
COPY --from=goblet-pruner /goblet/app/out/full/ .
COPY --from=goblet-installer /goblet/app/ .
WORKDIR /goblet/app
ARG FIRE_BASE_PROJECT_ID
ENV NODE_ENV=production \
    npm_config_yes=true \
    FIRE_BASE_PROJECT_ID=$FIRE_BASE_PROJECT_ID

RUN <<EOF
  set -eux;
  apt-get update
  apt-get install -y g++ make
  yarn global add expo-cli@$EXPO_CLI_VERSION expo-optimize sharp-cli firebase-tools

  echo "#! /bin/bash" >> /deploy.sh
  echo "" >> /deploy.sh
  echo "cd /goblet/app/repos/frontend" >> /deploy.sh
  echo "npm_config_yes=true NODE_ENV=production yarn build:fe" >> /deploy.sh
  echo "rm -rf /goblet/app/repos/frontend/dist" >> /deploy.sh
  echo "cp -R /goblet/app/node_modules/keg-core/web-build /goblet/app/repos/frontend/dist" >> /deploy.sh
  echo "firebase deploy --non-interactive --token \$FIREBASE_TOKEN --project \$FIRE_BASE_PROJECT_ID --only hosting" >> /deploy.sh
  chmod a+x /deploy.sh
EOF

CMD [ "/bin/bash" ]
