ARG GB_IMAGE_FROM=node:20.0.0-alpine3.16
ARG IMAGE_FROM=$GB_IMAGE_FROM

FROM $IMAGE_FROM as goblet-pnpm
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"
RUN npm install --global pnpm

# ---- Prune App Stage ---- #
FROM goblet-pnpm as goblet-pruner
ARG NPM_TOKEN
ENV NPM_TOKEN=$NPM_TOKEN
WORKDIR /goblet/app
RUN pnpm add --global turbo
COPY . .
RUN turbo prune --docker --scope=@gobletqa/frontend
COPY ./configs ./out/full/configs
COPY ./tap.js ./out/full/tap.js
COPY ./index.js ./out/full/index.js
COPY ./.firebaserc ./out/full/.firebaserc
COPY ./firebase.json ./out/full/firebase.json
COPY ./gobletRoot.js ./out/full/gobletRoot.js
COPY ./tsconfig.json ./out/full/tsconfig.json
# COPY ./repos/shared ./out/full/repos/shared

# ---- End Stage ---- #

# ---- Install Dependencies Stage ---- #
FROM goblet-pnpm as goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
COPY --from=goblet-pruner /goblet/app/out/pnpm-lock.yaml ./pnpm-lock.yaml
RUN CI=1 pnpm install --ignore-optional --no-frozen-lockfile --shamefully-hoist
# ---- End Stage ---- #

# ---- Build App Stage ---- #
FROM goblet-pnpm as goblet-builder
WORKDIR /goblet/app
ARG FIRE_BASE_KEY
ARG FIRE_BASE_APP_ID
ARG FIRE_BASE_PROJECT_ID
ARG FIRE_BASE_AUTH_DOMAIN
ARG FIRE_BASE_MEASURMENT_ID
ARG FIRE_BASE_STORAGE_BUCKET
ARG FIRE_BASE_PERSISTENCE=local
ARG FIRE_BASE_MESSAGING_SENDER_ID
ENV HOME=/root \
    DISPLAY=:0.0 \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    DEBUG=pw:* \
    DEBIAN_FRONTEND=noninteractive \
    npm_config_yes=true \
    NODE_ENV=production \
    FIRE_BASE_KEY=$FIRE_BASE_KEY \
    FIRE_BASE_APP_ID=$FIRE_BASE_APP_ID \
    FIRE_BASE_PROJECT_ID=$FIRE_BASE_PROJECT_ID \
    FIRE_BASE_PERSISTENCE=$FIRE_BASE_PERSISTENCE \
    FIRE_BASE_AUTH_DOMAIN=$FIRE_BASE_AUTH_DOMAIN \
    FIRE_BASE_MEASURMENT_ID=$FIRE_BASE_MEASURMENT_ID \
    FIRE_BASE_STORAGE_BUCKET=$FIRE_BASE_STORAGE_BUCKET \
    FIRE_BASE_MESSAGING_SENDER_ID=$FIRE_BASE_MESSAGING_SENDER_ID

COPY --from=goblet-pruner /goblet/app/tsconfig* .
COPY --from=goblet-pruner /goblet/app/out/full/ .
COPY --from=goblet-installer /goblet/app/ .
WORKDIR /goblet/app

RUN <<EOF
  set -eux;
  apt-get update
  apt-get install -y g++ make
  cd /goblet/app/repos/frontend
  npm_config_yes=true NODE_ENV=production pnpm build:fe
  rm -rf /goblet/app/repos/frontend/dist
  cp -R /goblet/app/node_modules/keg-core/web-build /goblet/app/repos/frontend/dist
EOF
# ---- End Stage ---- #

FROM goblet-pnpm as goblet-runner
WORKDIR /goblet/app
ENV HOME=/root \
    LC_ALL=C.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    DEBIAN_FRONTEND=noninteractive

COPY --from=goblet-builder /goblet/app/repos/frontend/dist /goblet/app/repos/frontend/dist
RUN <<EOF
  set -eux;
  pnpm add --global serve

  echo "#! /bin/bash" >> /deploy.sh
  echo "" >> /deploy.sh
  echo "cd /goblet/app" >> /deploy.sh
  echo "pnpm add --global firebase-tools" >> /deploy.sh
  echo "firebase deploy --non-interactive --token \$FIREBASE_TOKEN --project \$FIRE_BASE_PROJECT_ID --only hosting" >> /deploy.sh
  chmod a+x /deploy.sh
EOF

CMD [ "/bin/bash" ]
