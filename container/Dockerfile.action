ARG GB_IMAGE_FROM=ghcr.io/gobletqa/goblet-base:latest
ARG GB_BASE_IMAGE_FROM=$GB_IMAGE_FROM

ARG GB_ACT_IMAGE_FROM=mcr.microsoft.com/playwright:v1.40.0-focal
ARG IMAGE_FROM=$GB_ACT_IMAGE_FROM


# # ---- Build Stage  ---- #
# # Only include this stage when debugging
# FROM $GB_BASE_IMAGE_FROM as goblet-debug
# WORKDIR /goblet/app
# COPY .npmrc pnpm-*.yaml ./
# RUN pnpm fetch --no-optional --ignore-scripts
# COPY . .
# RUN pnpm install --prefer-offline --no-optional --fix-lockfile --force
# RUN pnpm build:tsup
# # ---- End Stage ---- #


# ---- Image Stage ---- #
FROM $GB_ACT_IMAGE_FROM as goblet-image
ARG DEBUG_FILE=/github/logs/pwlogs.log
ARG GB_PNPM_VERSION=8.7.4
ARG GB_GIT_GLOBAL_IGNORE=/goblet/.gitignore
ENV PWDEBUG=0
ENV PNPM_VERSION=$GB_PNPM_VERSION
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"

# 1. Enable all sources
# 2. Preinstall any dependecies for settting up the image
RUN npm uninstall -g yarn && \
    apt-get update && \
    apt-get install --yes --no-install-recommends \
    jq \
    gpg \
    wget \
    curl && \
    rm -rf /var/lib/apt/lists/* && \
    curl -fsSL https://get.pnpm.io/install.sh | ENV="$HOME/.shrc" SHELL="$(which sh)" sh - && \
    mkdir -p /goblet && \
    mkdir -p /github/app/temp && \
    mkdir -p /github/app/.tmp && \
    mkdir -p $(dirname "${DEBUG_FILE}")
# ---- End Stage ---- #


# # ---- Clean Stage  ---- #
FROM $GB_BASE_IMAGE_FROM as goblet-clean
WORKDIR /goblet/app
COPY tasks tasks
RUN rm -rf tasks/definitions/index.ts && \
    rm -rf tasks/definitions/kube && \
    rm -rf tasks/definitions/deploy && \
    rm -rf tasks/definitions/docker && \
    rm -rf tasks/definitions/devspace && \
    mv tasks/definitions/sc-entry.ts tasks/definitions/index.ts && \
    mkdir -p /goblet/runner/logs && \
    mkdir -p /goblet/runner/.tmp && \
    mkdir -p /goblet/runner/temp && \
    rm -rf .*ignore && \
    rm -rf firebase.json && \
    rm -rf tsconfig.json && \
    rm -rf configs/node_modules && \
    rm -rf configs/app.pm2.config.js && \
    rm -rf configs/commit-types.json && \
    rm -rf configs/commitlint.config.js && \
    rm -rf configs/eslintrc.config.js && \
    rm -rf configs/lint-staged.config.js && \
    rm -rf configs/pm2.config.js && \
    rm -rf configs/prettier.config.js && \
    rm -rf /goblet/app/repos && \
    rm -rf /goblet/app/node_modules
COPY container/tsconfig.docker.json tsconfig.json
# ---- End Stage ---- #


# ---- Deploy Tasks  ---- #
FROM $GB_BASE_IMAGE_FROM as goblet-deploy
WORKDIR /goblet/app

# # Only include this stage when debugging
# COPY --from=goblet-debug /goblet/app/ .

RUN CI=1 pnpm install --lockfile-only --fix-lockfile --prod --prefer-offline && \
    CI=1 pnpm install --fix-lockfile --prefer-offline --prod && \
    pnpm --filter=@gobletqa/testify --prod deploy /goblet/runner/repos/testify && \
    mkdir -p /goblet/runner/repos/browser && \
    cp -R /goblet/app/repos/browser/scripts /goblet/runner/repos/browser/scripts && \
    cp -R /goblet/app/repos/latent/dist /goblet/runner/repos/testify/node_modules/.pnpm/file+repos+latent/node_modules/@gobletqa/latent/dist
# ---- End Stage ---- #


# # ---- Run Stage ---- #
FROM goblet-image as goblet-runner
WORKDIR /github/app

COPY --from=goblet-clean /goblet/app/ .
COPY --from=goblet-deploy /goblet/runner/ .

RUN ln -s /github/app /goblet/app && \
    ln -s /github/app/repos/testify/node_modules /github/app/node_modules && \
    ln -s /github/app/repos/testify/node_modules $HOME/.node_modules && \
    ln -s /github/app/repos/testify/node_modules /github/node_modules

WORKDIR /github/app/repos/testify
ENV GOBLET_RUN_FROM_CI=1

