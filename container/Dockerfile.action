ARG GB_IMAGE_FROM=ghcr.io/gobletqa/goblet-base:latest
ARG GB_BASE_IMAGE_FROM=$GB_IMAGE_FROM

ARG GB_ACT_IMAGE_FROM=mcr.microsoft.com/playwright:v1.40.1-focal
ARG IMAGE_FROM=$GB_ACT_IMAGE_FROM

# ---- Turbo Stage ---- #
FROM $GB_BASE_IMAGE_FROM as goblet-turbo
RUN pnpm add --global turbo && \
    rm -rf .*ignore && \
    rm -rf configs/app.pm2.config.js && \
    rm -rf configs/commit-types.json && \
    rm -rf configs/commitlint.config.js && \
    rm -rf configs/eslintrc.config.js && \
    rm -rf configs/lint-staged.config.js && \
    rm -rf configs/pm2.config.js && \
    rm -rf configs/prettier.config.js && \
    rm -rf /goblet/app/repos/backend && \
    rm -rf /goblet/app/repos/conductor && \
    rm -rf /goblet/app/repos/screencast
# ---- End Stage ---- #


# ---- Image Stage ---- #
FROM $IMAGE_FROM as goblet-image
ARG GB_PNPM_VERSION=8.7.4
ARG GB_GIT_GLOBAL_IGNORE=/goblet/.gitignore
ENV PWDEBUG=0
ENV PNPM_VERSION=$GB_PNPM_VERSION
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"

# 1. Enable all sources
# 2. Preinstall any dependecies for settting up the image
RUN npm uninstall -g yarn && \
    apt-get update && \
    apt-get install --yes --no-install-recommends \
    jq \
    gpg \
    wget \
    curl && \
    rm -rf /var/lib/apt/lists/* && \
    curl -fsSL https://get.pnpm.io/install.sh | ENV="$HOME/.shrc" SHELL="$(which sh)" sh - && \
    mkdir -p /github/app/temp && \
    mkdir -p /github/app/.tmp
# ---- End Stage ---- #


# ---- Prune Stage ---- #
FROM goblet-turbo as goblet-pruner
WORKDIR /goblet/app

COPY tasks tasks
COPY repos/goblet/src repos/goblet/src
COPY repos/latent/src repos/latent/src
COPY repos/logger/src repos/logger/src
COPY repos/browser/src repos/browser/src
COPY repos/shared/src repos/shared/src
COPY repos/repo/src repos/repo/src
COPY repos/workflows/src repos/workflows/src
COPY repos/environment/src repos/environment/src
COPY repos/exam/src repos/exam/src
COPY repos/testUtils/src repos/testUtils/src

RUN turbo prune --docker --scope=@gobletqa/test-utils
RUN cp .nvmrc out/json/.nvmrc && \
    cp pnpm-lock.yaml out/json/pnpm-lock.yaml && \
    cp -r tasks out/full/tasks && \
    cp -r configs out/full/configs && \
    cp gobletRoot.js out/full/gobletRoot.js && \
    cp tsconfig.json out/full/tsconfig.json && \
    mkdir -p out/full/logs && \
    mkdir -p out/full/.tmp && \
    mkdir -p out/full/temp && \
    rm -rf out/full/.turbo && \
    rm -rf out/full/pnpm-lock.yaml && \
    rm -rf out/full/.turbo.json && \
    rm -rf out/full/tasks/definitions/index.ts && \
    rm -rf out/full/tasks/definitions/kube && \
    rm -rf out/full/tasks/definitions/deploy && \
    rm -rf out/full/tasks/definitions/docker && \
    rm -rf out/full/tasks/definitions/devspace && \
    mv out/full/tasks/definitions/sc-entry.ts out/full/tasks/definitions/index.ts && \
    rm -rf `find . -type d -name node_modules`
# ---- End Stage ---- #


# ---- Install Stage ---- #
FROM goblet-turbo as goblet-installer
WORKDIR /goblet/app
COPY --from=goblet-pruner /goblet/app/out/json/ .
RUN CI=1 pnpm install --fix-lockfile --prod --prefer-offline --no-optional
# ---- End Stage ---- #


# ---- Run Stage ---- #
FROM goblet-image as goblet-setup
WORKDIR /github/app

COPY --from=goblet-installer /goblet/app/ .
COPY --from=goblet-pruner /goblet/app/out/full/ .

RUN ln -s /github /goblet && \
    ln -s /github/app/node_modules $HOME/.node_modules && \
    ln -s /github/app/node_modules /github/node_modules

WORKDIR /github/app/repos/exam
# Enable this, once it's actually being used
# RUN pnpm build:cli
ENV GOBLET_RUN_FROM_CI=1
# ---- End Stage ---- #
