import type { TGenEnv } from "../types"


const conductor = (general:TGenEnv) => {
  const {
    GB_SC_PORT,
    GB_SC_IMAGE,
    GB_SC_ACTIVE,
    GB_KD_PORT,
    GB_NO_VNC_PORT,
    GB_SC_IMAGE_TAG,
    GB_SC_DEPLOYMENT,
    GB_KUBE_NAMESPACE,
    GB_LOCAL_DEV_MODE,
    GOBLET_SCREENCAST_PORT,
    GB_CD_LISTENER_TIMEOUT,
    GOBLET_KIND_SERVICE_PORT,
    GOBLET_SCREENCAST_SERVICE_HOST,
    GB_CD_HOST,
    GB_CD_HASH_KEY,
    GB_CD_SUB_DOMAIN,

    GB_CD_PIDS_LIMIT,
    GB_CD_RATE_LIMIT,

    GB_CD_VALIDATION_KEY,
    GB_CD_VALIDATION_HEADER,

    GB_DD_API_PROXY_PORT,
    GOBLET_DIND_SERVICE_PORT,

    GB_CD_FORWARD_HOST_HEADER,
    GB_CD_FORWARD_PORT_HEADER,
    GB_CD_FORWARD_PROTO_HEADER,
    GB_CD_FORWARD_ROUTE_HEADER,
    GB_CD_FORWARD_SUBDOMAIN_HEADER,

  } = process.env

  return {
    GB_CD_HOST,
    GB_CD_HASH_KEY,
    GB_CD_SUB_DOMAIN,

    GB_CD_PIDS_LIMIT,
    GB_CD_RATE_LIMIT,

    GB_CD_VALIDATION_KEY,
    GB_CD_VALIDATION_HEADER,

    GB_DD_API_PROXY_PORT,
    GOBLET_DIND_SERVICE_PORT,

    GB_SC_PORT,
    GB_SC_IMAGE,
    GB_SC_ACTIVE,
    GB_KD_PORT,
    GB_NO_VNC_PORT,
    GB_SC_IMAGE_TAG,
    GB_SC_DEPLOYMENT,
    GB_KUBE_NAMESPACE,
    GB_LOCAL_DEV_MODE,
    GOBLET_SCREENCAST_PORT,
    GB_CD_LISTENER_TIMEOUT,
    GOBLET_KIND_SERVICE_PORT,
    GOBLET_SCREENCAST_SERVICE_HOST,
    
    GB_CD_FORWARD_HOST_HEADER,
    GB_CD_FORWARD_PORT_HEADER,
    GB_CD_FORWARD_PROTO_HEADER,
    GB_CD_FORWARD_ROUTE_HEADER,
    GB_CD_FORWARD_SUBDOMAIN_HEADER,

  }
}

export default conductor
