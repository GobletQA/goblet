import type { TGenEnv } from "../types"

import { asNum } from "../utils/asNum"
import { asBool } from "../utils/asBool"

const test = (general:TGenEnv) => {

  const {
    EXAM_LOG_LEVEL,
    EXAM_CLI_DEBUG,
    EXAM_CLI_VERBOSE,
    GOBLET_TEST_DEBUG,
    GOBLET_TEST_VERBOSE,
    GOBLET_TEST_TIMEOUT,

    GOBLET_TEST_TYPE,
    GOBLET_TEST_RETRY,
    GOBLET_TEST_REPORT,
    GOBLET_TEST_TRACING,
    GOBLET_TEST_VIDEO_RECORD,

    GOBLET_PAGE_REUSE,
    GOBLET_CONTEXT_REUSE,
    GOBLET_TEST_TRACING_SNAPSHOTS,
    GOBLET_TEST_TRACING_SCREENSHOTS,

  } = process.env
  
  return {
    EXAM_LOG_LEVEL,
    EXAM_CLI_DEBUG: asBool(EXAM_CLI_DEBUG),
    EXAM_CLI_VERBOSE: asBool(EXAM_CLI_VERBOSE),

    GOBLET_TEST_DEBUG: asBool(GOBLET_TEST_DEBUG),
    GOBLET_TEST_VERBOSE: asBool(GOBLET_TEST_VERBOSE),

    GOBLET_TEST_TYPE,
    GOBLET_TEST_REPORT,
    GOBLET_TEST_TRACING,
    GOBLET_TEST_VIDEO_RECORD,

    GOBLET_PAGE_REUSE: asBool(GOBLET_PAGE_REUSE),
    GOBLET_CONTEXT_REUSE: asBool(GOBLET_CONTEXT_REUSE),
    GOBLET_TEST_RETRY: asNum(GOBLET_TEST_RETRY, { default: 1, exists: true }),
    GOBLET_TEST_TRACING_SNAPSHOTS: asBool(GOBLET_TEST_TRACING_SNAPSHOTS || true),
    GOBLET_TEST_TRACING_SCREENSHOTS: asBool(GOBLET_TEST_TRACING_SCREENSHOTS || true),
    GOBLET_TEST_TIMEOUT: asNum(GOBLET_TEST_TIMEOUT, { default: 15000, exists: true }),

  }

}

export default test
