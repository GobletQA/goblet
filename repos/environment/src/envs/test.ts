import type { TGenEnv } from "../types"

import { asNum } from "../utils/asNum"
import { asBool } from "../utils/asBool"

const test = (general:TGenEnv) => {

  const {
    EXAM_LOG_LEVEL,
    EXAM_CLI_DEBUG,
    EXAM_CLI_VERBOSE,
    
    GOBLET_RUN_FROM_UI,
    GOBLET_RUN_FROM_CI,
    PARKIN_LOG_JEST_SPEC,

    GOBLET_TEST_TIMEOUT,

    GOBLET_TEST_TYPE,
    GOBLET_TEST_RETRY,
    GOBLET_TEST_REPORT,
    GOBLET_TEST_TRACING,
    GOBLET_TEST_VIDEO_RECORD,

    GOBLET_PAGE_REUSE,
    GOBLET_CONTEXT_REUSE,
    GOBLET_TEST_SCREENSHOT,
    GOBLET_TEST_TRACING_SOURCES,
    GOBLET_TEST_TRACING_SNAPSHOTS,
    GOBLET_TEST_TRACING_SCREENSHOTS,
    PARKIN_FEATURE_NAME,
    PARKIN_FEATURE_TAGS,
    GOBLET_FEATURE_TAGS=PARKIN_FEATURE_TAGS,
    GOBLET_FEATURE_NAME=PARKIN_FEATURE_NAME,

  } = process.env

  const GOBLET_TEST_DEBUG = asBool(process.env.GOBLET_TEST_DEBUG)
  const GOBLET_TEST_VERBOSE = asBool(process.env.GOBLET_TEST_VERBOSE)

  return {
    EXAM_LOG_LEVEL: EXAM_LOG_LEVEL?? general.GB_LOG_LEVEL,
    EXAM_CLI_DEBUG: asBool(EXAM_CLI_DEBUG ?? GOBLET_TEST_DEBUG),
    EXAM_CLI_VERBOSE: asBool(EXAM_CLI_VERBOSE ?? GOBLET_TEST_VERBOSE),

    GOBLET_RUN_FROM_UI,
    GOBLET_RUN_FROM_CI,
    PARKIN_LOG_JEST_SPEC,

    GOBLET_FEATURE_TAGS,
    GOBLET_FEATURE_NAME,

    GOBLET_TEST_DEBUG: GOBLET_TEST_DEBUG,
    GOBLET_TEST_VERBOSE: GOBLET_TEST_VERBOSE,

    GOBLET_TEST_TYPE,
    GOBLET_TEST_REPORT,
    GOBLET_TEST_TRACING,
    GOBLET_TEST_VIDEO_RECORD,

    GOBLET_PAGE_REUSE: asBool(GOBLET_PAGE_REUSE),
    GOBLET_TEST_TIMEOUT: asNum(GOBLET_TEST_TIMEOUT),
    GOBLET_CONTEXT_REUSE: asBool(GOBLET_CONTEXT_REUSE),
    GOBLET_TEST_SCREENSHOT: asBool(GOBLET_TEST_SCREENSHOT ?? true),
    GOBLET_TEST_RETRY: asNum(GOBLET_TEST_RETRY, { default: 1, exists: true }),
    GOBLET_TEST_TRACING_SOURCES: asBool(GOBLET_TEST_TRACING_SOURCES ?? true),
    GOBLET_TEST_TRACING_SNAPSHOTS: asBool(GOBLET_TEST_TRACING_SNAPSHOTS ?? true),
    GOBLET_TEST_TRACING_SCREENSHOTS: asBool(GOBLET_TEST_TRACING_SCREENSHOTS ?? true),

  }

}

export default test
